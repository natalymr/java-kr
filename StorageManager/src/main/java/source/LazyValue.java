package source;

public interface LazyValue<R> {
    /**
     * Запрашивает значение.
     *
     * 1. Если значение еще не было вычислено, то вызвавший `get` поток используется для вычисления значения.
     *
     * 2. Если значение находится в процессе вычисления другим потоком, то вызвавший `get` поток блокируется
     * до тех пор, пока не произойдет одно из трех событий:
     *  - вычисление значения завершено (возможно, аварийно)
     *  - было выполнено прерывание данного потока.
     *  - произошел spurious wake-up
     *
     * 3. Вызов `get` может завершиться тремя различными способами:
     *  - Если вычисление значения было успешно, то данное значение возвращается. Если на какой-то вызов `get`
     *  было возвращено значение X, то гарантируется, что все последующие вызовы `get` закончатся именно возвращением
     *  того же самого X.
     *  - Если вычисление значения бросило RuntimeException e, то все вызовы `get` должны бросать тот же самый `e`
     *  - Если вычисление было прервано (Thread.interrupt), то *данный* вызов `get` бросает InterruptedException.
     *  Обратите внимание, что данный случай не гарантирует ничего относительно последующих вызовов `get`.
     */
    R get() throws RecursiveComputationException, InterruptedException;

    boolean isReady();
}
